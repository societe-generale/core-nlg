'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/framework/datas/','title':"Datas",'section':"CoreNLG as a framework",'content':"Datas\r#\r\rThe Datas class is used to store the input you receive. It should be inherited by your own custom data classes.\nclass MyDatas(Datas) def __init__(self, json_in) super().__init__(json_in) my_datas = MyDatas(input) "});index.add({'id':1,'href':'/docs/testing/freeze/','title':"Freeze synonyms",'section':"Testing",'content':"Freeze synonyms\r#\r\rYou can freeze the synonyms with the corresponding argument of the NlgTools class (or the Document class if you use CoreNLG as a framework).\nIn freeze mode, when using synonyms, the first possibility will always be drawn. This allows you to test the non-regression of your app on a specific use case. However you should keep in mind it will not help you to detect changes on other branches than the first ones.\n"});index.add({'id':2,'href':'/docs/quickstart/','title':"Quickstart",'section':"Docs",'content':"Quickstart\r#\r\rInstall CoreNLG\r#\r\rTo use this library you will need to have Python installed. If you don\u0026rsquo;t already have Python installed please follow the official installation guide.\nYou can install the latest version of the library using the pip command:\npip install CoreNLG\rHello World\r#\r\rfrom CoreNLG.NlgTools import NlgTools from CoreNLG.PredefObjects import TextVar nlg = NlgTools() text = TextVar( \u0026#34;Hello\u0026#34;, nlg.nlg_syn(\u0026#34;world\u0026#34;, \u0026#34;everyone\u0026#34;), \u0026#34;!\u0026#34; ) nlg.write_text(text) print(nlg.text) \u0026#34;\u0026#34;\u0026#34; Possible outputs are: - Hello world! - Hello everyone! \u0026#34;\u0026#34;\u0026#34; This is a basic example showing the use of:\n NlgTools which is the object from which CoreNLG functions are called TextVar which ease the concatenation of strings  "});index.add({'id':3,'href':'/docs/nlgtools/write_text/','title':"write_text",'section':"NlgTools",'content':"write_text\r#\r\rThe write_text method draws synonyms and handles post evaluations on the text provided as argument then saves the text in the NlgTools object allowing its acces via the text property.\nParameters\r#\r\rThe method takes a string as parameter.\nnlg = NlgTools(lang=\u0026#39;en\u0026#39;) text = TextVar( nlg.nlg_syn(\u0026#39;My name is\u0026#39;, \u0026#39;I am\u0026#39;), \u0026#39;John.\u0026#39; ) nlg.write_text(text) print(nlg.text) # My name is John. # I am John. "});index.add({'id':4,'href':'/docs/framework/document/','title':"Document",'section':"CoreNLG as a framework",'content':"Document\r#\r\rThe Document class is your final document wrapper.\nclass Document: def __init__(self, datas, title=\u0026#34;\u0026#34;, log_level=\u0026#34;ERROR\u0026#34;, css_path=\u0026#34;css/styles.css\u0026#34;, lang=\u0026#34;fr\u0026#34;, freeze=False) my_datas = MyDatas(input) document = Document(my_datas) It takes at least an instance of a Datas class (or your custom one) as parameter.\nThe lang and freeze arguments corresponds to the underlying NlgTools object which will be created.\n"});index.add({'id':5,'href':'/docs/testing/get_text_details/','title':"get_text_details",'section':"Testing",'content':"get_text_details\r#\r\rThe get_text_details method is the recommended way for non-regression testing.\nYou should call get_text_details from your NlgTools object instead of the write_text method (or from your Document object instead of the write method).\nThis method returns a python dict containing all the data on the possible generated texts from your input.\nfrom CoreNLG.DocumentConstructors import Datas, TextClass, Document input = {} class MyDatas(Datas): def __init__(self, json_in): super().__init__(json_in) class MyText(TextClass): def __init__(self, section): super().__init__(section) self.text = ( \u0026#34;Hello\u0026#34;, self.nlg_syn( (\u0026#34;world\u0026#34;, \u0026#34;WORLD_USED\u0026#34;), \u0026#34;everyone\u0026#34; ), \u0026#34;.\u0026#34;, \u0026#34;I can speak to\u0026#34;, self.post_eval( \u0026#39;WORLD_USED\u0026#39;, \u0026#39;everyone\u0026#39;, \u0026#39;the world\u0026#39;, ), \u0026#34;!\u0026#34; ) my_datas = MyDatas(input) document = Document(my_datas) MyText(document.new_section()) # document.write() details = document.get_text_details() print(details) This will give you the following output:\n[ { \u0026#34;text\u0026#34;: { \u0026#34;raw\u0026#34;: \u0026#34;Hello b7e736edc59bb0c73afed33daa185fa2e8d5e8b34127c0562543e05e017aa644 . I can speak to 45b8643250f5b9e1756f079f9d93c89dee74abea83d275a4be59e03da4ce8ed2 !\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;Hello b7e736edc59bb0c73afed33daa185fa2e8d5e8b34127c0562543e05e017aa644. I can speak to 45b8643250f5b9e1756f079f9d93c89dee74abea83d275a4be59e03da4ce8ed2 !\u0026#34; }, \u0026#34;synonyms\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;b7e736edc59bb0c73afed33daa185fa2e8d5e8b34127c0562543e05e017aa644\u0026#34;, \u0026#34;choices\u0026#34;: [ { \u0026#34;raw\u0026#34;: \u0026#34;world\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;World\u0026#34;, \u0026#34;keys\u0026#34;: [\u0026#34;WORLD_USED\u0026#34;] }, { \u0026#34;raw\u0026#34;: \u0026#34;everyone\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;Everyone\u0026#34;, \u0026#34;keys\u0026#34;: [] } ] } ], \u0026#34;post_evals\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;45b8643250f5b9e1756f079f9d93c89dee74abea83d275a4be59e03da4ce8ed2\u0026#34;, \u0026#34;infos\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;WORLD_USED\u0026#34;, \u0026#34;if_active\u0026#34;: { \u0026#34;raw\u0026#34;: \u0026#34;everyone\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;Everyone\u0026#34; }, \u0026#34;if_inactive\u0026#34;: { \u0026#34;raw\u0026#34;: \u0026#34;the world\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;The world\u0026#34; }, \u0026#34;deactivate\u0026#34;: False } } ] } ] You obtain all the data you need for non regression testing such as the text (raw and beautified) and the different branches (synonyms and post evals).\nThe id is the hash of the object data. If you want to make sure the hash won\u0026rsquo;t change you can specify an id when using the nlg_syn method:\nself.nlg_syn( (\u0026#34;world\u0026#34;, \u0026#34;WORLD_USED\u0026#34;), \u0026#34;everyone\u0026#34;, non_reg_id=\u0026#34;synonym_world_or_everyone\u0026#34; ) self.post_eval( \u0026#39;WORLD_USED\u0026#39;, \u0026#39;everyone\u0026#39;, \u0026#39;the world\u0026#39;, non_reg_id=\u0026#34;post_eval_everyone_or_the_world\u0026#34; ) You\u0026rsquo;ll get:\n[ { \u0026#34;text\u0026#34;: { \u0026#34;raw\u0026#34;: \u0026#34;Hello synonym_world_or_everyone . I can speak to post_eval_everyone_or_the_world !\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;Hello synonym_world_or_everyone. I can speak to post_eval_everyone_or_the_world !\u0026#34; }, \u0026#34;synonyms\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;synonym_world_or_everyone\u0026#34;, \u0026#34;choices\u0026#34;: [ { \u0026#34;raw\u0026#34;: \u0026#34;world\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;World\u0026#34;, \u0026#34;keys\u0026#34;: [\u0026#34;WORLD_USED\u0026#34;] }, { \u0026#34;raw\u0026#34;: \u0026#34;everyone\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;Everyone\u0026#34;, \u0026#34;keys\u0026#34;: [] } ] } ], \u0026#34;post_evals\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;post_eval_everyone_or_the_world\u0026#34;, \u0026#34;infos\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;WORLD_USED\u0026#34;, \u0026#34;if_active\u0026#34;: { \u0026#34;raw\u0026#34;: \u0026#34;everyone\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;Everyone\u0026#34; }, \u0026#34;if_inactive\u0026#34;: { \u0026#34;raw\u0026#34;: \u0026#34;the world\u0026#34;, \u0026#34;beautiful\u0026#34;: \u0026#34;The world\u0026#34; }, \u0026#34;deactivate\u0026#34;: False } } ] } ] You can now save a json file for each of your inputs and track any changes on any branches of your text.\n"});index.add({'id':6,'href':'/docs/nlgtools/text/','title':"text",'section':"NlgTools",'content':"text\r#\r\rThe text attribute allows you to get a processed text from the one saved in your NlgTools object with the write_text method.\nnlg = NlgTools(lang=\u0026#39;en\u0026#39;) text = \u0026#39;In the end , he realized he could see sound and hear words . \u0026#39; nlg.write_text(text) print(nlg.text) # In the end, he realized he could see sound and hear words. nlg = NlgTools(lang=\u0026#39;fr\u0026#39;) text = \u0026#39;à cause de le dépassement\u0026#39; nlg.write_text(text) print(nlg.text) # À cause du dépassement When accessing the text attribute, your text is modified as follow:\n adds a capital letter after a dot remove unnecessary spaces adds spaces after a punctuation sign if needed handle contractions (mostly for french)  "});index.add({'id':7,'href':'/docs/textvar/','title':"TextVar",'section':"Docs",'content':"TextVar\r#\r\rConstructor\r#\r\rThe TextVar object is a sub-class of str. It makes it easier to concatenate strings.\nIts constructor takes 0 to n strings and concatenates them by adding a space between them.\nIt will unpack any nested list or tuple that is provided as argument.\ntext_1 = TextVar() # \u0026#34;\u0026#34; text_2 = TextVar(\u0026#34;It was the best sandcastle he had ever seen.\u0026#34;) # It was the best sandcastle he had ever seen. text_3 = TextVar(\u0026#34;All you need to do\u0026#34;, \u0026#34;is pick up the pen\u0026#34;, \u0026#34;and begin.\u0026#34;) # All you need to do is pick up the pen and begin. text_4 = TextVar(\u0026#34;He loved eating\u0026#34;, (\u0026#34;his\u0026#34;, \u0026#34;bananas\u0026#34;), \u0026#34;in hot dog buns.\u0026#34;) # He loved eating his bananas in hot dog buns. Appending\r#\r\rYou must use the \u0026lsquo;+=\u0026rsquo; operator to append text to your string. This works the same as the constructor.\nname = \u0026#34;Mary\u0026#34; city = \u0026#34;New-York\u0026#34; number_of_children = 2 text = TextVar() text += name, \u0026#34;lives in\u0026#34;, city, \u0026#34;.\u0026#34; if number_of_children == 0: text += \u0026#34;She does not have children.\u0026#34; elif number_of_children == 1: text += \u0026#34;She has one child.\u0026#34; else: text += \u0026#34;She has\u0026#34;, str(number_of_children), \u0026#34;children.\u0026#34; print(text) # Mary lives in New-York . She has 2 children. Now you may have noticed the space we introduced before the dot in the first sentence. This is not correct and should not be present in the final text, so what are the options?\nYou could use a simple trick like this one:\ntext += name, \u0026#34;lives in\u0026#34;, city + \u0026#34;.\u0026#34; This will make sure no space will be added before the dot, however there is a better way to do it using the text attribute from the NlgTools object that will correct any syntaxic mistakes in your text. We will see it in the next chapter.\n"});index.add({'id':8,'href':'/docs/testing/get_all_texts/','title':"get_all_texts",'section':"Testing",'content':"get_all_texts\r#\r\rThe get_all_texts method should be used the same way as the get_text_details. It gives you all the texts that could be generated from your input if the synonyms were drawn randomly. Be careful when using it as it could take some time depending on the number of synonyms you use in your app.\nfrom CoreNLG.DocumentConstructors import Datas, TextClass, Document input = {} class MyDatas(Datas): def __init__(self, json_in): super().__init__(json_in) class MyText(TextClass): def __init__(self, section): super().__init__(section) self.text = ( \u0026#34;Hello\u0026#34;, self.nlg_syn( (\u0026#34;world\u0026#34;, \u0026#34;WORLD_USED\u0026#34;), \u0026#34;everyone\u0026#34; ), \u0026#34;.\u0026#34;, \u0026#34;I can speak to\u0026#34;, self.post_eval( \u0026#39;WORLD_USED\u0026#39;, \u0026#39;everyone\u0026#39;, \u0026#39;the world\u0026#39;, ), \u0026#34;!\u0026#34; ) my_datas = MyDatas(input) document = Document(my_datas) MyText(document.new_section()) # document.write() texts = document.get_all_texts() print(texts) You\u0026rsquo;ll get:\n[[\u0026#39;Hello world. I can speak to everyone !\u0026#39;, \u0026#39;Hello everyone. I can speak to the world !\u0026#39;]] "});index.add({'id':9,'href':'/docs/nlgtools/nlg_enum/','title':"nlg_enum",'section':"NlgTools",'content':"nlg_enum\r#\r\rThe nlg_enum method allows to enumerate over a list of items and create a sentence with it.\nIt automatically format the sentence with bullet-point style when the number of elements is above a provided threshold.\nnlg = NlgTools(lang=\u0026#39;en\u0026#39;) my_list = [\u0026#34;six apples\u0026#34;, \u0026#34;three bananas\u0026#34;, \u0026#34;two peaches\u0026#34;] nlg.nlg_enum(my_list) # \u0026#34;six apples, three bananas and two peaches\u0026#34; Parameters\r#\r\r   Parameter Type Default Value     The list of elements to iterate over list    max_elem (maximum number of elements of the list to display) int None (all elements)   sep (the seperator between each element except last one) string \u0026ldquo;,\u0026rdquo;   last_sep (separator before last item) string \u0026ldquo;and\u0026rdquo; (en) \u0026ldquo;et\u0026rdquo; (fr)   begin_w (will be inserted before enumeration) string \u0026quot;\u0026quot;   end_w (will be inserted after enumeration) string \u0026quot;\u0026quot;   nb_elem_bullet (if the number of displayed elements is above or equals this number, the output will be a bullet-point list) int None   end_of_bullet (will be inserted at the end of each bullet except last) string \u0026quot;\u0026quot;   end_of_last_bullet (will be inserted at the end of last bullet) string \u0026quot;\u0026quot;   capitalize_bullets (firsts letter of each bullets will be capitalized) boolean True   text_if_empty_list (will be displayed if the list is empty) string \u0026quot;\u0026quot;    Usage\r#\r\rnlg = NlgTools() my_list = [\u0026#39;apples\u0026#39;, \u0026#39;bananas\u0026#39;, \u0026#39;peaches\u0026#39;] text = nlg.nlg_enum( my_list, max_elem=2, nb_elem_bullet=2, begin_w=\u0026#39;Fruits I like :\u0026#39;, end_w=\u0026#39;Delicious, right ?\u0026#39;, end_of_bullet=\u0026#39;,\u0026#39;, end_of_last_bullet=\u0026#39;.\u0026#39; ) nlg.write_text(text) \u0026#34;\u0026#34;\u0026#34; Fruits I like : - Apples, - Bananas. Delicious, right ? \u0026#34;\u0026#34;\u0026#34; my_list = [\u0026#39;apples\u0026#39;, \u0026#39;bananas\u0026#39;] text = nlg.nlg_enum([TextVar( fruit, nlg.nlg_syn(\u0026#39;so\u0026#39;, \u0026#39;\u0026#39;), nlg.nlg_syn(\u0026#39;succulent\u0026#39;, \u0026#39;tasty\u0026#39;)) ) for fruit in my_list], begin_w=\u0026#39;I find\u0026#39;, end_w=\u0026#39;.\u0026#39; ) nlg.write_text(text) \u0026#34;\u0026#34;\u0026#34; One of the following: I find apples so tasty and bananas succulent. I find apples tasty and bananas so succulent. I find apples so succulent and bananas tasty. I find apples succulent and bananas so tasty. \u0026#34;\u0026#34;\u0026#34; "});index.add({'id':10,'href':'/docs/nlgtools/nlg_syn/','title':"nlg_syn",'section':"NlgTools",'content':"nlg_syn\r#\r\rUse nlg_syn to create synonyms and add variability to your text. From one render to another, you won\u0026rsquo;t have the same result.\nnlg = NlgTools(lang=\u0026#39;en\u0026#39;) text = TextVar( \u0026#39;I was\u0026#39;, nlg.nlg_syn(\u0026#39;hungry\u0026#39;, \u0026#39;starving\u0026#39;), \u0026#39;so I decided to eat\u0026#39;, nlg.nlg_syn(\u0026#39;one apple\u0026#39;, \u0026#39;three apples\u0026#39;), \u0026#39;.\u0026#39; ) nlg.write_text(text) Parameters\r#\r\r   Parameter Type Default Value     The different options A list containing the options nlg_syn([option_1, option_2]) or destructured options as several parameters nlg_syn(option_1, option_2)    mode (the mode of drawing) \u0026ldquo;smart\u0026rdquo; or \u0026ldquo;random\u0026rdquo; \u0026ldquo;smart\u0026rdquo;   non_reg_id (the id of the synonym for non regression testing) string (must be unique for non identical synonyms) None    An option can be:\n a String a Tuple (String, String) or (String, [String]).  nlg = NlgTools() option_1 = \u0026#34;synonym_1\u0026#34; option_2 = (\u0026#34;synonym_2\u0026#34;, \u0026#34;KEY_A\u0026#34;) option_3 = (\u0026#34;synonym_3\u0026#34;, [\u0026#34;KEY_B\u0026#34;, \u0026#34;KEY_C\u0026#34;]) nlg.nlg_syn(option_1, option_2, option_3) If the chosen synonym is associated with one or multiple keys, these will be activated (see next chapter for usage).\nThe nlg_syn methods returns a String containing a token where the synonym should appear. This string should be evaluated by the write_text method of the NlgTools object to obtain the result of the draw based on the mode:\n random mode: the synonym will be drawn randomly among the provided options smart mode: the drawn synonym will be the one avoiding repetitions considering previous synonyms drawn in smart mode.  "});index.add({'id':11,'href':'/docs/nlgtools/','title':"NlgTools",'section':"Docs",'content':"NlgTools\r#\r\rThe NlgTools object is the entry point to the CoreNLG world.\nConstructor\r#\r\rThe constructor takes 2 parameters:\n lang: the language of the resources to check for automatic contractions and typographical convention handling (default: \u0026lsquo;fr\u0026rsquo;) freeze: a boolean indicating if the engine should freeze the synonyms (i.e it will always take the first one in the provided list). It\u0026rsquo;s useful for test purpose (default: False)  nlg_en = NlgTools(lang=\u0026#39;en\u0026#39;) nlg_fr_frozen = NlgTools(lang=\u0026#39;fr\u0026#39;, freeze=True) "});index.add({'id':12,'href':'/docs/framework/section/','title':"Section",'section':"CoreNLG as a framework",'content':"Section\r#\r\rThe Section class is a text zone of your document independant with an independant NlgTools object. Synonyms drawing will be independant between sections. It is created from the Document class with the new_section method.\nYou can give a HTML tag name in parameter (by_default \u0026lsquo;div\u0026rsquo;) and HTML attributes.\nmy_datas = MyDatas(input) document = Document(my_datas) first_paragraph_section = document.new_section(html_elem_attr={\u0026#34;id\u0026#34;: \u0026#34;firstParagraph\u0026#34;}) second_paragraph_section = document.new_section(html_elem_attr={\u0026#34;id\u0026#34;: \u0026#34;secondParagraph\u0026#34;}) document.write() The write method of your document will call write_text on each section in the document.\ndef write_section(self, section, parent_elem=None, parent_id=None) You should not confuse a Section with a simple text zone.\nIf you want your first and second paragraph to be independant, you create sections like above.\nIf you just want to have two separates text zone in your document but without independancy on the synonyms, you create tags with the add_tag method (which is an alias of nlg_tags we saw earlier).\nparagraph_section = document.new_section() paragraph_section.text = ( paragraph_section.tools.add_tag(\u0026#39;div\u0026#39;, id=\u0026#39;first_paragraph\u0026#39;, text=\u0026#39;First paragraph text\u0026#39;), paragraph_section.tools.add_tag(\u0026#39;div\u0026#39;, id=\u0026#39;two_paragraph\u0026#39;, text=\u0026#39;Second paragraph text\u0026#39;) ) "});index.add({'id':13,'href':'/docs/framework/','title':"CoreNLG as a framework",'section':"Docs",'content':"CoreNLG as a framework\r#\r\rFor bigger projects where a more specific file structure is needed, CoreNLG provides a project template for what we call using it as framework.\npip install cookiecutter\rcookiecutter https://github.com/societe-generale/core-nlg.git\rThis is the file structure you should obtain:\nMyProject\r|-- ProjectEntryPoint.py\r|-- MyProject\r| |-- Datas\r| | |-- MyDatas.py\r| |-- TextClass\r| | |-- Introduction.py\r| | |-- Content.py\r| |-- Resources\r| |-- Tools\r|-- inputs\r| |-- test.json\rProjectEntryPoint.py will be your main, you can use it to test locally your application.\nRun this file and you will see the HTML result in your console and your browser will render it automatically.\n"});index.add({'id':14,'href':'/docs/nlgtools/post_eval/','title':"post_eval",'section':"NlgTools",'content':"post_eval\r#\r\rSynonyms are drawn during the write_text processing so you won\u0026rsquo;t have access to the chosen synonym when you write your text structure.\nAs you build complex sentences, you\u0026rsquo;ll want to know which word was chosen as a synonym to match the end of the sentence with it.\nUse post_eval to check the activation of keys which may have been previously activated when drawing synonyms.\nnlg = NlgTools() text = TextVar( \u0026#39;I decided to eat\u0026#39;, nlg.nlg_syn( \u0026#39;one\u0026#39;, (\u0026#39;three\u0026#39;, \u0026#39;PLURAL\u0026#39;) ), nlg.post_eval(\u0026#39;PLURAL\u0026#39;, \u0026#39;apples\u0026#39;, \u0026#39;apple\u0026#39;, True), \u0026#39;.\u0026#39; ) nlg.write_text(text) # This will give you either \u0026#34;I decided to eat one apple.\u0026#34; or \u0026#34;I decided to eat three apples.\u0026#34; # The \u0026#39;PLURAL\u0026#39; key is now deactivated so next post_eval method would not find it. Parameters\r#\r\r   Parameter Type Default Value     The key to check String    The text to write if the key is found String \u0026quot;\u0026quot;   The text to write if the key not found String \u0026quot;\u0026quot;   Should the key be deactivated if found Boolean False   non_reg_id Id for non regression testing String The hash of the object data    Return\r#\r\rThe post_eval method returns a string containing a token. This string should be evaluated by the write_text method of the NlgTools object to replace the token with the correct text.\n"});index.add({'id':15,'href':'/docs/framework/textclass/','title':"TextClass",'section':"CoreNLG as a framework",'content':"TextClass\r#\r\rA TextClass is a class in which you will write your text. You should create your own sub-class for each part of your text.\nA TextClass takes a Section as parameter.\nclass MyDatas(Datas) def __init__(self, json_in) super().__init__(json_in) self.my_job = \u0026#34;developer\u0026#34; class MyText(TextClass): def __init__(self, section): super().__init__(section) self.text = ( \u0026#34;Hello\u0026#34;, self.nlg_syn(\u0026#34;world\u0026#34;, \u0026#34;everyone\u0026#34;), \u0026#34;.\u0026#34;, self.nlg_tags(\u0026#39;br\u0026#39;), self.nlg_tags(\u0026#39;b\u0026#39;, \u0026#34;Nice to meet you.\u0026#34;), \u0026#34;I am a\u0026#34;, self.my_job, \u0026#34;.\u0026#34; ) my_datas = MyDatas(input) document = Document(my_datas) my_section = document.new_section(html_elem_attr={\u0026#34;id\u0026#34;: \u0026#34;mySection\u0026#34;}) MyText(my_section) document.write() # \u0026lt;div id=\u0026#34;mySection\u0026#34;\u0026gt;Hello everyone.\u0026lt;br\u0026gt; \u0026lt;b\u0026gt;Nice to meet you.\u0026lt;/b\u0026gt; I am a developer.\u0026lt;/div\u0026gt; The TextClass is a powerful object which allows you to call all the NlgTools methods with self.\nYou can also access every attributes of your Datas class the same way.\nThe self.text write your text in the Section that was send as a parameter to your TextClass.\nYou can use it with strings, nested lists or tuples and it will do the same job as the TextVar object.\nDon\u0026rsquo;t be afraid ! The \u0026lsquo;=\u0026rsquo; operator is override, to enjoy all the possibility of it, you should do :\nself.text = \u0026#34;Hello,\u0026#34; self.text = \u0026#34;this is one sentence\u0026#34; self.text = ( \u0026#34;that I am\u0026#34;, \u0026#34;writing here.\u0026#34; ) # Hello, this is one sentence that I am writing here. "});index.add({'id':16,'href':'/docs/nlgtools/nlg_num/','title':"nlg_num",'section':"NlgTools",'content':"nlg_num\r#\r\rThe nlg_num method allows to transform a number in a string following several criterion.\n   Parameter Type Default Value     The number int or float or Decimal    sep (the separator for the decimal) string \u0026lsquo;.\u0026rsquo;   mile_sep (the seperator for mile) string ' '   dec (the number of decimals to display) int None (all decimals)   force_sign (whether to add \u0026lsquo;+\u0026rsquo; before the number if is positive) boolean False   remove_trailing_zeros (whether to remove not significant 0 in the decimals) boolean True    nlg = NlgTools() my_number = 10000.66028 str_num = nlg.nlg_num(my_number, dec=3, force_sign=True) print(str_num) # +10 000.66 # The remove_trailing_zeros parameter will remove the last decimal even though we indicated 3 decimals because it is a 0. "});index.add({'id':17,'href':'/docs/testing/','title':"Testing",'section':"Docs",'content':"Testing\r#\r\rThe CoreNLG library provides several features to help you test your app:\n freeze the synonyms get_text_details method get_all_texts method  "});index.add({'id':18,'href':'/docs/nlgtools/nlg_tags/','title':"nlg_tags",'section':"NlgTools",'content':"nlg_tags\r#\r\rThe nlg_tags method allows allows to create a string containing HTML tags with attributes and encapsulate text into them.\nnlg = NlgTools() nlg.nlg_tags(\u0026#39;br\u0026#39;) # \u0026lt;br\u0026gt; nlg.nlg_tags(\u0026#39;p\u0026#39;, TextVar( \u0026#39;This is a\u0026#39;, nlg.nlg_tags(\u0026#39;b\u0026#39;, \u0026#39;sentence with bold\u0026#39;), \u0026#39;in a paragraph.\u0026#39; )) # \u0026lt;p\u0026gt;This is a \u0026lt;b\u0026gt;sentence with bold\u0026lt;/p\u0026gt; in a paragraph.\u0026lt;/p\u0026gt; nlg.nlg_tags(\u0026#39;div\u0026#39;, nlg.nlg_tags(\u0026#39;h1\u0026#39;, \u0026#34;My content\u0026#34;), id=\u0026#34;title_div\u0026#34; ) # \u0026lt;div id=\u0026#34;title_div\u0026#34;\u0026gt;\u0026lt;h1\u0026gt;My content\u0026lt;/h1\u0026gt;\u0026lt;/div\u0026gt; Parameters\r#\r\r   Parameter Type Default Value     the html tag to create string    text (the text to write inside the tag) string \u0026quot;\u0026quot;   _class (the html class attribute to provide to the tag) string \u0026quot;\u0026quot;   **args (key-values to add html attributes to the tag) key=string (e.g. id=\u0026ldquo;my_id\u0026rdquo;) None    "});index.add({'id':19,'href':'/docs/nlgtools/no_interpret/','title':"no_interpret",'section':"NlgTools",'content':"no_interpret\r#\r\rThe no_interpret method allows to deactivate the nlg interpretation (automatic contractions, typographical convention) of the write_text method.\nnlg = NlgTools() text = \u0026#34;This is a string.with a dot inside .\u0026#34; nlg.write_text(text) print(nlg.text) # \u0026#34;This is a string. With a dot inside.\u0026#34; text = \u0026#34;This is a string.with a dot inside .\u0026#34; text = nlg.no_interpret(text) nlg.write_text(text) print(nlg.text) # This is a string.with a dot inside . "});})();